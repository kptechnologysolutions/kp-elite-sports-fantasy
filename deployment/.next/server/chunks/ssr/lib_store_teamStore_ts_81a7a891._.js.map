{"version":3,"sources":["turbopack:///[project]/lib/store/teamStore.ts"],"sourcesContent":["// Client-side store for managing teams\nimport React from 'react';\nimport { Team, Player } from '@/lib/types';\n\n// Mock player data for different platforms\nconst platformPlayers: Record<string, Player[]> = {\n  espn: [\n    {\n      id: 'espn_1',\n      name: 'Josh Allen',\n      position: 'QB',\n      team: 'BUF',\n      jerseyNumber: 17,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 31.2, \n        projectedPoints: 27.5,\n        passingYards: 287,\n        passingTDs: 2,\n        rushingYards: 54,\n        rushingTDs: 1\n      },\n    },\n    {\n      id: 'espn_2',\n      name: 'Saquon Barkley',\n      position: 'RB',\n      team: 'PHI',\n      jerseyNumber: 26,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 19.8, \n        projectedPoints: 22.0,\n        rushingYards: 112,\n        rushingTDs: 1,\n        receptions: 3,\n        receivingYards: 28\n      },\n    },\n    {\n      id: 'espn_3',\n      name: 'CeeDee Lamb',\n      position: 'WR',\n      team: 'DAL',\n      jerseyNumber: 88,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 21.3, \n        projectedPoints: 19.5,\n        receptions: 9,\n        receivingYards: 143,\n        receivingTDs: 1,\n        targets: 12\n      },\n    },\n  ],\n  yahoo: [\n    {\n      id: 'yahoo_1',\n      name: 'Lamar Jackson',\n      position: 'QB',\n      team: 'BAL',\n      jerseyNumber: 8,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 28.7, \n        projectedPoints: 26.0,\n        passingYards: 245,\n        passingTDs: 2,\n        rushingYards: 87,\n        rushingTDs: 1\n      },\n    },\n    {\n      id: 'yahoo_2',\n      name: 'Austin Ekeler',\n      position: 'RB',\n      team: 'LAC',\n      jerseyNumber: 30,\n      status: { isActive: true, gameStatus: 'questionable', lastUpdated: new Date() },\n      injuryStatus: {\n        type: 'Ankle',\n        description: 'Limited in practice',\n        severity: 'minor',\n        practiceStatus: 'limited'\n      },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 15.2, \n        projectedPoints: 18.0,\n        rushingYards: 62,\n        receptions: 5,\n        receivingYards: 45,\n        receivingTDs: 1\n      },\n    },\n  ],\n  sleeper: [\n    {\n      id: 'sleeper_1',\n      name: 'Jalen Hurts',\n      position: 'QB',\n      team: 'PHI',\n      jerseyNumber: 1,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 29.8, \n        projectedPoints: 28.0,\n        passingYards: 278,\n        passingTDs: 2,\n        rushingYards: 65,\n        rushingTDs: 1\n      },\n    },\n    {\n      id: 'sleeper_2',\n      name: 'Derrick Henry',\n      position: 'RB',\n      team: 'TEN',\n      jerseyNumber: 22,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 18.5, \n        projectedPoints: 17.0,\n        rushingYards: 125,\n        rushingTDs: 1,\n        receptions: 2,\n        receivingYards: 15\n      },\n    },\n    {\n      id: 'sleeper_3',\n      name: 'Davante Adams',\n      position: 'WR',\n      team: 'LV',\n      jerseyNumber: 17,\n      status: { isActive: true, gameStatus: 'playing', lastUpdated: new Date() },\n      stats: { \n        season: 2024, \n        week: 10, \n        fantasyPoints: 23.7, \n        projectedPoints: 21.0,\n        receptions: 10,\n        receivingYards: 157,\n        receivingTDs: 1,\n        targets: 14\n      },\n    },\n  ],\n};\n\nclass TeamStore {\n  private teams: Team[] = [];\n  private currentTeamId: string | null = null;\n\n  constructor() {\n    // Load teams from localStorage on init\n    if (typeof window !== 'undefined') {\n      const storedTeams = localStorage.getItem('fantasyTeams');\n      if (storedTeams) {\n        this.teams = JSON.parse(storedTeams);\n      }\n      \n      const storedCurrentTeam = localStorage.getItem('currentTeamId');\n      if (storedCurrentTeam) {\n        this.currentTeamId = storedCurrentTeam;\n      }\n    }\n  }\n\n  private saveToLocalStorage() {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('fantasyTeams', JSON.stringify(this.teams));\n      if (this.currentTeamId) {\n        localStorage.setItem('currentTeamId', this.currentTeamId);\n      }\n    }\n  }\n\n  importTeamFromAPI(platform: string, data: any): Team {\n    const teamId = `team_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    console.log('ImportTeamFromAPI received data:', {\n      teamName: data.teamName,\n      currentWeek: data.currentWeek,\n      matchup: data.matchup,\n      record: data.record,\n      playersCount: data.players?.length\n    });\n    \n    // Make sure we're using the week score, not season total\n    const weekScore = data.matchup?.points || 0;\n    const opponentScore = data.matchup?.opponentScore || 0;\n    \n    console.log('Setting scores:', { weekScore, opponentScore });\n    \n    // Process players - ensure they have all required fields\n    const processedPlayers = data.players?.map((player: any) => ({\n      id: player.id,\n      name: player.name,\n      position: player.position,\n      team: player.team,\n      jerseyNumber: player.jerseyNumber || 0,\n      status: player.status || {\n        isActive: false,\n        gameStatus: 'healthy',\n        lastUpdated: new Date()\n      },\n      stats: player.stats || {\n        season: 2025,\n        week: data.currentWeek || 4,\n        fantasyPoints: 0,\n        projectedPoints: 0\n      },\n      injuryStatus: player.injuryStatus\n    })) || [];\n    \n    const newTeam: Team = {\n      id: teamId,\n      userId: 'user1',\n      name: data.teamName || `My ${platform} Team`,\n      platform: (platform.charAt(0).toUpperCase() + platform.slice(1).toLowerCase()) as any,\n      platformTeamId: data.leagueId,\n      leagueName: data.leagueName,\n      leagueId: data.leagueId,\n      leagueSize: data.leagueSize || 12,\n      scoringType: 'PPR',\n      record: data.record || {\n        wins: 0,\n        losses: 0,\n        ties: 0,\n        pointsFor: 0,\n        pointsAgainst: 0,\n        streak: '',\n      },\n      rank: data.rank || Math.floor(Math.random() * 10) + 1,\n      players: processedPlayers,\n      liveScore: data.matchup ? {\n        teamScore: weekScore, // Use the week score variable\n        opponentScore: opponentScore,\n        opponentName: data.matchup.opponentName || 'Opponent',\n        week: data.matchup.week || data.currentWeek || 1,\n        isLive: true,\n        timeRemaining: `Week ${data.matchup.week || data.currentWeek || 1}`,\n        projectedScore: 0,\n        winProbability: 50,\n      } : undefined,\n      color: '#ff5722',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    // Calculate win probability based on current scores\n    if (newTeam.liveScore) {\n      const scoreDiff = newTeam.liveScore.teamScore - newTeam.liveScore.opponentScore;\n      newTeam.liveScore.winProbability = Math.max(10, Math.min(90, 50 + (scoreDiff * 2)));\n    }\n    \n    this.teams.push(newTeam);\n    this.currentTeamId = teamId;\n    this.saveToLocalStorage();\n    \n    return newTeam;\n  }\n\n  importTeam(platform: string, leagueInfo?: { leagueId?: string; teamId?: string; leagueName?: string }) {\n    const platformKey = platform.toLowerCase();\n    const basePlayers = platformPlayers[platformKey] || platformPlayers.espn;\n    \n    // Create DEEP COPY of players with unique IDs for this team\n    const uniquePlayers = basePlayers.map(player => ({\n      ...player,\n      id: `${player.id}_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      stats: player.stats ? { ...player.stats } : undefined,\n      status: player.status ? { ...player.status } : undefined,\n      injuryStatus: player.injuryStatus ? { ...player.injuryStatus } : undefined\n    }));\n    \n    // Generate unique team data\n    const teamId = `team_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const leagueNames = {\n      espn: 'Champions League',\n      yahoo: 'Dynasty Dominators',\n      sleeper: 'Waiver Wire Warriors',\n      nfl: 'Gridiron Legends',\n      cbs: 'Prime Time Players',\n      draftkings: 'DFS Masters',\n    };\n    \n    const newTeam: Team = {\n      id: teamId,\n      userId: 'user1',\n      name: `My ${platform.toUpperCase()} Team ${this.teams.length + 1}`,\n      platform: platform as any,\n      platformTeamId: leagueInfo?.teamId || `${platform}_team_${Date.now()}`,\n      leagueName: leagueInfo?.leagueName || leagueNames[platformKey] || `${platform} League`,\n      leagueId: leagueInfo?.leagueId || `league_${Date.now()}`,\n      leagueSize: 12,\n      scoringType: 'PPR',\n      record: {\n        wins: Math.floor(Math.random() * 8) + 2,\n        losses: Math.floor(Math.random() * 6),\n        ties: 0,\n        pointsFor: Math.random() * 500 + 800,\n        pointsAgainst: Math.random() * 500 + 750,\n        streak: Math.random() > 0.5 ? `W${Math.floor(Math.random() * 3) + 1}` : `L${Math.floor(Math.random() * 2) + 1}`,\n      },\n      rank: Math.floor(Math.random() * 10) + 1,\n      players: uniquePlayers, // Use unique players copy\n      liveScore: {\n        teamScore: Math.random() * 50 + 70,\n        opponentScore: Math.random() * 50 + 65,\n        opponentName: 'Opponent Team',\n        week: 10,\n        isLive: Math.random() > 0.5,\n        timeRemaining: '2:35 Q3',\n        projectedScore: Math.random() * 50 + 80,\n        winProbability: Math.random() * 30 + 40,\n      },\n      color: platformKey === 'espn' ? '#ff0000' : platformKey === 'yahoo' ? '#7b68ee' : '#ff5722',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.teams.push(newTeam);\n    this.currentTeamId = teamId;\n    this.saveToLocalStorage();\n    \n    return newTeam;\n  }\n\n  getTeams(): Team[] {\n    return this.teams;\n  }\n\n  getTeam(teamId: string): Team | undefined {\n    return this.teams.find(t => t.id === teamId);\n  }\n\n  getCurrentTeam(): Team | undefined {\n    if (!this.currentTeamId) return this.teams[0];\n    return this.teams.find(t => t.id === this.currentTeamId);\n  }\n\n  getCurrentTeamId(): string | null {\n    return this.currentTeamId;\n  }\n\n  setCurrentTeam(teamId: string) {\n    this.currentTeamId = teamId;\n    this.saveToLocalStorage();\n  }\n\n  updateTeam(teamId: string, updates: Partial<Team>): Team | undefined {\n    const teamIndex = this.teams.findIndex(t => t.id === teamId);\n    if (teamIndex === -1) return undefined;\n    \n    this.teams[teamIndex] = {\n      ...this.teams[teamIndex],\n      ...updates,\n      updatedAt: new Date(),\n    };\n    \n    this.saveToLocalStorage();\n    return this.teams[teamIndex];\n  }\n\n  deleteTeam(teamId: string): boolean {\n    const initialLength = this.teams.length;\n    this.teams = this.teams.filter(t => t.id !== teamId);\n    \n    if (this.currentTeamId === teamId) {\n      this.currentTeamId = this.teams[0]?.id || null;\n    }\n    \n    this.saveToLocalStorage();\n    return this.teams.length < initialLength;\n  }\n\n  removeTeam(id: string) {\n    this.teams = this.teams.filter(team => team.id !== id);\n    if (this.currentTeamId === id) {\n      this.currentTeamId = this.teams.length > 0 ? this.teams[0].id : null;\n    }\n    this.saveToLocalStorage();\n  }\n\n  clearAllTeams() {\n    this.teams = [];\n    this.currentTeamId = null;\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('fantasyTeams');\n      localStorage.removeItem('currentTeamId');\n    }\n  }\n}\n\n// Create singleton instance\nconst teamStore = typeof window !== 'undefined' ? new TeamStore() : null;\nexport default teamStore;\n\n// React Hook for team store\nexport function useTeamStore() {\n  const [teams, setTeams] = React.useState<Team[]>([]);\n  const [currentTeamId, setCurrentTeamId] = React.useState<string | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    if (!teamStore) {\n      setLoading(false);\n      return;\n    }\n\n    // Initial load\n    setTeams(teamStore.getTeams());\n    setCurrentTeamId(teamStore.getCurrentTeamId());\n    setLoading(false);\n\n    // Subscribe to changes (simple polling for now)\n    const interval = setInterval(() => {\n      if (!teamStore) return;\n      \n      const newTeams = teamStore.getTeams();\n      const newCurrentId = teamStore.getCurrentTeamId();\n      \n      if (JSON.stringify(newTeams) !== JSON.stringify(teams)) {\n        setTeams(newTeams);\n      }\n      if (newCurrentId !== currentTeamId) {\n        setCurrentTeamId(newCurrentId);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    teams,\n    currentTeamId,\n    currentTeam: teams.find(t => t.id === currentTeamId),\n    loading,\n    addTeam: (team: Team) => {\n      if (teamStore) teamStore.addTeam(team);\n    },\n    updateTeam: (id: string, updates: Partial<Team>) => {\n      if (teamStore) teamStore.updateTeam(id, updates);\n    },\n    removeTeam: (id: string) => {\n      if (teamStore) teamStore.removeTeam(id);\n    },\n    clearAllTeams: () => {\n      if (teamStore) teamStore.clearAllTeams();\n    },\n    setCurrentTeam: (id: string) => {\n      if (teamStore) teamStore.setCurrentTeam(id);\n    },\n    importTeamFromAPI: (platform: string, data: any) => {\n      if (teamStore) return teamStore.importTeamFromAPI(platform, data);\n      return null;\n    },\n    clearAll: () => {\n      if (teamStore) teamStore.clearAll();\n    },\n  };\n}"],"names":[],"mappings":"mFACA,IAAA,EAAA,EAAA,CAAA,CAAA,aA0ZoE,KAI7D,SAAS,IACd,GAAM,CAAC,EAAO,EAAS,CAAG,EAAA,EAJb,KAIkB,CAAC,QAAQ,CAAS,EAAE,EAC7C,CAAC,EAAe,EAAiB,CAAG,EAAA,OAAK,CAAC,QAAQ,CAAgB,MAClE,CAAC,EAAS,EAAW,CAAG,EAAA,OAAK,CAAC,QAAQ,EAAC,GA+B7C,OA7BA,EAAA,OAAK,CAAC,SAAS,CAAC,KAEZ,GAAW,EAyBf,EAAG,EAAE,EAEE,OACL,gBACA,EACA,YAAa,EAAM,IAAI,CAAC,GAAK,EAAE,EAAE,GAAK,GACtC,UACA,QAAS,AAAC,IAEV,EACA,WAAY,CAAC,EAAY,KAEzB,EACA,WAAY,AAAC,IAEb,EACA,cAAe,KAEf,EACA,eAAgB,AAAC,IAEjB,EACA,kBAAmB,CAAC,EAAkB,IAE7B,KAET,SAAU,KAEV,CACF,CACF"}