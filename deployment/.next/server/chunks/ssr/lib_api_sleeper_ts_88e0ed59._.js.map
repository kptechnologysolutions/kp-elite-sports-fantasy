{"version":3,"sources":["turbopack:///[project]/lib/api/sleeper.ts"],"sourcesContent":["// Sleeper API Integration\n// Sleeper has a public API that doesn't require authentication for reading data\n\nconst SLEEPER_BASE_URL = 'https://api.sleeper.app/v1';\nconst NFL_SEASON = '2025'; // Current NFL season - IMPORTANT: Update this each year!\n\nexport interface SleeperUser {\n  user_id: string;\n  username: string;\n  display_name: string;\n  avatar: string;\n}\n\nexport interface SleeperLeague {\n  league_id: string;\n  name: string;\n  total_rosters: number;\n  roster_positions: string[];\n  scoring_settings: Record<string, number>;\n  season: string;\n  season_type: string;\n  sport: string;\n  avatar: string;\n}\n\nexport interface SleeperRoster {\n  roster_id: number;\n  owner_id: string;\n  league_id: string;\n  players: string[];\n  starters: string[];\n  settings: {\n    wins: number;\n    losses: number;\n    ties: number;\n    fpts: number;\n    fpts_against: number;\n  };\n}\n\nexport interface SleeperPlayer {\n  player_id: string;\n  first_name: string;\n  last_name: string;\n  full_name: string;\n  team: string;\n  position: string;\n  number: number;\n  status: string;\n  injury_status?: string;\n  fantasy_positions: string[];\n}\n\nexport interface SleeperMatchup {\n  roster_id: number;\n  matchup_id: number;\n  points: number;\n  custom_points?: number;\n  players: string[];\n  starters: string[];\n}\n\nclass SleeperAPI {\n  // Get user by username\n  async getUser(username: string): Promise<SleeperUser | null> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/user/${username}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching Sleeper user:', error);\n      return null;\n    }\n  }\n\n  // Get all leagues for a user in current season\n  async getUserLeagues(userId: string, season: string = NFL_SEASON): Promise<SleeperLeague[]> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/user/${userId}/leagues/nfl/${season}`);\n      if (!response.ok) return [];\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching user leagues:', error);\n      return [];\n    }\n  }\n\n  // Get rosters for a specific league\n  async getLeagueRosters(leagueId: string): Promise<SleeperRoster[]> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/rosters`);\n      if (!response.ok) return [];\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching league rosters:', error);\n      return [];\n    }\n  }\n\n  // Get users in a league\n  async getLeagueUsers(leagueId: string): Promise<SleeperUser[]> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/users`);\n      if (!response.ok) return [];\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching league users:', error);\n      return [];\n    }\n  }\n\n  // Get matchups for a specific week\n  async getMatchups(leagueId: string, week: number): Promise<SleeperMatchup[]> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/matchups/${week}`);\n      if (!response.ok) return [];\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching matchups:', error);\n      return [];\n    }\n  }\n\n  // Get all NFL players\n  async getAllPlayers(): Promise<Record<string, SleeperPlayer>> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/players/nfl`);\n      if (!response.ok) return {};\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching NFL players:', error);\n      return {};\n    }\n  }\n\n  // Get current NFL state (week, season, etc)\n  async getNFLState(): Promise<any> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/state/nfl`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching NFL state:', error);\n      return null;\n    }\n  }\n\n  // Get trending players (adds/drops)\n  async getTrendingPlayers(type: 'add' | 'drop', hours: number = 24, limit: number = 10): Promise<any[]> {\n    try {\n      const response = await fetch(`${SLEEPER_BASE_URL}/players/nfl/trending/${type}?lookback_hours=${hours}&limit=${limit}`);\n      if (!response.ok) return [];\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching trending players:', error);\n      return [];\n    }\n  }\n\n  // Helper function to get user's team in a specific league\n  async getUserTeam(username: string, leagueId: string) {\n    // First get the user\n    const user = await this.getUser(username);\n    if (!user) return null;\n\n    // Get all rosters in the league\n    const rosters = await this.getLeagueRosters(leagueId);\n    \n    // Find the user's roster\n    const userRoster = rosters.find(roster => roster.owner_id === user.user_id);\n    if (!userRoster) return null;\n\n    // Get all league users to find team names\n    const leagueUsers = await this.getLeagueUsers(leagueId);\n    const leagueUser = leagueUsers.find(u => u.user_id === user.user_id);\n    \n    // Get team metadata (includes team name)\n    const leagueTeamsRes = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/users`);\n    const leagueTeams = await leagueTeamsRes.json();\n    const userTeamData = leagueTeams.find((t: any) => t.user_id === user.user_id);\n    const teamName = userTeamData?.metadata?.team_name || leagueUser?.display_name || user.display_name || user.username;\n\n    // Get league details\n    const leagueResponse = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}`);\n    const league = await leagueResponse.json();\n\n    // Get ACTUAL current NFL week from state\n    const nflState = await this.getNFLState();\n    // For regular season, use leg (which represents the current week)\n    // display_week is for display purposes, leg is the actual week number\n    const currentWeek = nflState?.leg || nflState?.week || 1;\n    const currentSeason = nflState?.season || NFL_SEASON;\n    \n    console.log('NFL State:', { \n      currentWeek, \n      currentSeason, \n      leg: nflState?.leg,\n      week: nflState?.week,\n      display_week: nflState?.display_week,\n      season_type: nflState?.season_type,\n      nflState \n    });\n\n    // Get current week matchups\n    const matchups = await this.getMatchups(leagueId, currentWeek);\n    const userMatchup = matchups.find(m => m.roster_id === userRoster.roster_id);\n    \n    // Find opponent matchup\n    let opponentMatchup = null;\n    let opponentRoster = null;\n    let opponentUser = null;\n    let opponentName = 'Opponent';\n    \n    if (userMatchup) {\n      // Find the opponent by matching matchup_id\n      opponentMatchup = matchups.find(m => \n        m.matchup_id === userMatchup.matchup_id && \n        m.roster_id !== userRoster.roster_id\n      );\n      \n      if (opponentMatchup) {\n        // Find opponent's roster and user info\n        opponentRoster = rosters.find(r => r.roster_id === opponentMatchup.roster_id);\n        if (opponentRoster) {\n          opponentUser = leagueUsers.find(u => u.user_id === opponentRoster.owner_id);\n          // Get opponent's team metadata for team name\n          const opponentTeamData = leagueTeams.find((t: any) => t.user_id === opponentRoster.owner_id);\n          opponentName = opponentTeamData?.metadata?.team_name || opponentUser?.display_name || opponentUser?.username || 'Opponent';\n        }\n      }\n    }\n\n    // Get all players to map IDs to names\n    const allPlayers = await this.getAllPlayers();\n\n    // Get player stats for current week if matchup exists\n    const playerStats: Record<string, number> = {};\n    if (userMatchup && userMatchup.players_points) {\n      // Sleeper provides player points in the matchup data\n      Object.assign(playerStats, userMatchup.players_points);\n    }\n\n    // Map player IDs to player objects with REAL stats\n    const rosterPlayers = userRoster.players.map(playerId => {\n      const player = allPlayers[playerId];\n      if (!player) return null;\n      \n      // Get this player's actual points for the current week\n      const weekPoints = playerStats[playerId] || 0;\n      \n      return {\n        id: playerId,\n        name: player.full_name || `${player.first_name} ${player.last_name}`,\n        position: player.position,\n        team: player.team,\n        jerseyNumber: player.number,\n        status: {\n          isActive: player.status === 'Active',\n          gameStatus: player.injury_status || 'playing',\n          lastUpdated: new Date()\n        },\n        injuryStatus: player.injury_status ? {\n          type: player.injury_status,\n          description: player.injury_status,\n          severity: 'unknown',\n          practiceStatus: 'unknown'\n        } : undefined,\n        stats: {\n          season: parseInt(currentSeason),\n          week: currentWeek,\n          fantasyPoints: weekPoints, // Actual points for this week\n          projectedPoints: 0,\n          isStarter: userMatchup?.starters?.includes(playerId) || false\n        }\n      };\n    }).filter(Boolean);\n\n    // Log the matchup data to debug\n    console.log('User Matchup Data:', {\n      week: currentWeek,\n      userPoints: userMatchup?.points,\n      opponentPoints: opponentMatchup?.points,\n      userMatchup,\n      opponentMatchup\n    });\n\n    return {\n      user,\n      league: {\n        id: league.league_id,\n        name: league.name,\n        size: league.total_rosters,\n        scoringType: league.scoring_settings?.rec ? 'PPR' : 'Standard',\n        season: league.season\n      },\n      roster: {\n        ...userRoster,\n        teamName: teamName, // Use the team name we fetched above\n        players: rosterPlayers,\n        rank: userRoster.settings?.rank || 1,\n        settings: userRoster.settings // Keep the original settings for debugging\n      },\n      matchup: {\n        ...userMatchup,\n        points: userMatchup?.points || 0, // This is the WEEK score, not season total\n        opponentName,\n        opponentScore: opponentMatchup?.points || 0,\n        opponentRosterId: opponentMatchup?.roster_id,\n        week: currentWeek\n      },\n      currentWeek,\n      currentSeason\n    };\n  }\n\n  // Import all teams for a user\n  async importUserTeams(username: string) {\n    const user = await this.getUser(username);\n    if (!user) {\n      throw new Error(`User \"${username}\" not found on Sleeper`);\n    }\n\n    const leagues = await this.getUserLeagues(user.user_id);\n    const teams = [];\n\n    for (const league of leagues) {\n      const teamData = await this.getUserTeam(username, league.league_id);\n      if (teamData) {\n        teams.push({\n          platform: 'Sleeper',\n          leagueId: league.league_id,\n          leagueName: league.name,\n          teamName: teamData.roster.teamName,\n          roster: teamData.roster,\n          league: teamData.league,\n          matchup: teamData.matchup\n        });\n      }\n    }\n\n    return teams;\n  }\n}\n\n// Export singleton instance\nexport const sleeperAPI = new SleeperAPI();"],"names":[],"mappings":"iEAGA,IAAM,EAAmB,6BACnB,EAAa,OAqVN,CArVc,CAqVD,IA3R1B,AA2R8B,MA3RxB,AAEJ,MAAM,QAAQ,CAAgB,CAA+B,CAC3D,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,EA9D6B,IA8DvB,EAAE,EAAA,CAAU,EACnE,GAAI,CAAC,EAAS,EAAE,CAAE,OAAO,KACzB,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,+BAAgC,GACvC,IACT,CACF,CAGA,MAAM,eAAe,CAAc,CAAE,EAAiB,CAAU,CAA4B,CAC1F,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,MAAM,EAAE,EAAO,aAAa,EAAE,EAAA,CAAQ,EACvF,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,EAAE,CAC3B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,+BAAgC,GACvC,EAAE,AACX,CACF,CAGA,MAAM,iBAAiB,CAAgB,CAA4B,CACjE,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,QAAQ,EAAE,EAAS,QAAQ,CAAC,EAC7E,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,EAAE,CAC3B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,iCAAkC,GACzC,EAAE,AACX,CACF,CAGA,MAAM,eAAe,CAAgB,CAA0B,CAC7D,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,QAAQ,EAAE,EAAS,MAAM,CAAC,EAC3E,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,EAAE,CAC3B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,+BAAgC,GACvC,EAAE,AACX,CACF,CAGA,MAAM,YAAY,CAAgB,CAAE,CAAY,CAA6B,CAC3E,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,QAAQ,EAAE,EAAS,UAAU,EAAE,EAAA,CAAM,EACtF,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,EAAE,CAC3B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,2BAA4B,GACnC,EAAE,AACX,CACF,CAGA,MAAM,eAAwD,CAC5D,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,YAAY,CAAC,EAC9D,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,CAAC,EAC1B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,8BAA+B,GACtC,CAAC,CACV,CACF,CAGA,MAAM,aAA4B,CAChC,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,UAAU,CAAC,EAC5D,GAAI,CAAC,EAAS,EAAE,CAAE,OAAO,KACzB,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,4BAA6B,GACpC,IACT,CACF,CAGA,MAAM,mBAAmB,CAAoB,CAAE,EAAgB,EAAE,CAAE,EAAgB,EAAE,CAAkB,CACrG,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,EAAiB,sBAAsB,EAAE,EAAK,gBAAgB,EAAE,EAAM,OAAO,EAAE,EAAA,CAAO,EACtH,GAAI,CAAC,EAAS,EAAE,CAAE,MAAO,EAAE,CAC3B,OAAO,MAAM,EAAS,IAAI,EAC5B,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,mCAAoC,GAC3C,EAAE,AACX,CACF,CAGA,MAAM,YAAY,CAAgB,CAAE,CAAgB,CAAE,CAEpD,IAAM,EAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAChC,GAAI,CAAC,EAAM,OAAO,KAGlB,IAAM,EAAU,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAGtC,EAAa,EAAQ,IAAI,CAAC,GAAU,EAAO,QAAQ,GAAK,EAAK,OAAO,EAC1E,GAAI,CAAC,EAAY,OAAO,KAGxB,IAAM,EAAc,MAAM,IAAI,CAAC,cAAc,CAAC,GACxC,EAAa,EAAY,IAAI,CAAC,GAAK,EAAE,OAAO,GAAK,EAAK,OAAO,EAG7D,EAAiB,MAAM,MAAM,CAAA,EAAG,EAAiB,QAAQ,EAAE,EAAS,MAAM,CAAC,EAC3E,EAAc,MAAM,EAAe,IAAI,GACvC,EAAe,EAAY,IAAI,CAAC,AAAC,GAAW,EAAE,OAAO,GAAK,EAAK,OAAO,EACtE,EAAW,GAAc,UAAU,WAAa,GAAY,cAAgB,EAAK,YAAY,EAAI,EAAK,QAAQ,CAG9G,EAAiB,MAAM,MAAM,CAAA,EAAG,EAAiB,QAAQ,EAAE,EAAA,CAAU,EACrE,EAAS,MAAM,EAAe,IAAI,GAGlC,EAAW,MAAM,IAAI,CAAC,WAAW,GAGjC,EAAc,GAAU,KAAO,GAAU,MAAQ,EACjD,EAAgB,GAAU,QAAU,EAE1C,QAAQ,GAAG,CAAC,aAAc,aACxB,gBACA,EACA,IAAK,GAAU,IACf,KAAM,GAAU,KAChB,aAAc,GAAU,aACxB,YAAa,GAAU,qBACvB,CACF,GAGA,IAAM,EAAW,MAAM,IAAI,CAAC,WAAW,CAAC,EAAU,GAC5C,EAAc,EAAS,IAAI,CAAC,GAAK,EAAE,SAAS,GAAK,EAAW,SAAS,EAGvE,EAAkB,KAClB,EAAiB,KACjB,EAAe,KACf,EAAe,WAEnB,GAAI,IAEF,EAAkB,EAAS,IAAI,CAFhB,AAEiB,GAC9B,EAAE,UAAU,GAAK,EAAY,UAAU,EACvC,EAAE,SAAS,GAAK,EAAW,UAAS,IAKpC,EAAiB,EAAQ,IAAI,CAAC,GAAK,EAAE,SAAS,GAAK,EAAgB,SAAS,GACxD,CAClB,EAAe,EAAY,IAAI,CAAC,GAAK,EAAE,OAAO,GAAK,EAAe,QAAQ,EAE1E,IAAM,EAAmB,EAAY,IAAI,CAAE,AAAD,GAAY,EAAE,OAAO,GAAK,EAAe,QAAQ,EAC3F,EAAe,GAAkB,UAAU,WAAa,GAAc,cAAgB,GAAc,UAAY,UAClH,CAKJ,IAAM,EAAa,MAAM,IAAI,CAAC,aAAa,GAGrC,EAAsC,CAAC,EACzC,GAAe,EAAY,cAAc,EAAE,AAE7C,OAAO,MAAM,CAAC,EAAa,EAAY,cAAc,EAIvD,IAAM,EAAgB,EAAW,OAAO,CAAC,GAAG,CAAC,IAC3C,IAAM,EAAS,CAAU,CAAC,EAAS,CACnC,GAAI,CAAC,EAAQ,OAAO,KAGpB,IAAM,EAAa,CAAW,CAAC,EAAS,EAAI,EAE5C,MAAO,CACL,GAAI,EACJ,KAAM,EAAO,SAAS,EAAI,CAAA,EAAG,EAAO,UAAU,CAAC,CAAC,EAAE,EAAO,SAAS,CAAA,CAAE,CACpE,SAAU,EAAO,QAAQ,CACzB,KAAM,EAAO,IAAI,CACjB,aAAc,EAAO,MAAM,CAC3B,OAAQ,CACN,SAA4B,WAAlB,EAAO,MAAM,CACvB,WAAY,EAAO,aAAa,EAAI,UACpC,YAAa,IAAI,IACnB,EACA,aAAc,EAAO,aAAa,CAAG,CACnC,KAAM,EAAO,aAAa,CAC1B,YAAa,EAAO,aAAa,CACjC,SAAU,UACV,eAAgB,SAClB,OAAI,EACJ,MAAO,CACL,OAAQ,SAAS,GACjB,KAAM,EACN,cAAe,EACf,gBAAiB,EACjB,UAAW,GAAa,UAAU,SAAS,IAAa,EAC1D,CACF,CACF,GAAG,MAAM,CAAC,SAWV,OARA,QAAQ,GAAG,CAAC,qBAAsB,CAChC,KAAM,EACN,WAAY,GAAa,OACzB,eAAgB,GAAiB,mBACjC,kBACA,CACF,GAEO,MACL,EACA,OAAQ,CACN,GAAI,EAAO,SAAS,CACpB,KAAM,EAAO,IAAI,CACjB,KAAM,EAAO,aAAa,CAC1B,YAAa,EAAO,gBAAgB,EAAE,IAAM,MAAQ,WACpD,OAAQ,EAAO,MAAM,AACvB,EACA,OAAQ,CACN,GAAG,CAAU,CACb,SAAU,EACV,QAAS,EACT,KAAM,EAAW,QAAQ,EAAE,MAAQ,EACnC,SAAU,EAAW,QACvB,AAD+B,CAAC,CAEhC,QAAS,CACP,GAAG,CAAW,CACd,OAAQ,GAAa,QAAU,UAJ0C,KAKzE,EACA,cAAe,GAAiB,QAAU,EAC1C,iBAAkB,GAAiB,UACnC,KAAM,CACR,cACA,gBACA,CACF,CACF,CAGA,MAAM,gBAAgB,CAAgB,CAAE,CACtC,IAAM,EAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAChC,GAAI,CAAC,EACH,IADS,EACH,AAAI,MAAM,CAAC,MAAM,EAAE,EAAS,sBAAsB,CAAC,EAG3D,IAAM,EAAU,MAAM,IAAI,CAAC,cAAc,CAAC,EAAK,OAAO,EAChD,EAAQ,EAAE,CAEhB,IAAK,IAAM,KAAU,EAAS,CAC5B,IAAM,EAAW,MAAM,IAAI,CAAC,WAAW,CAAC,EAAU,EAAO,SAAS,EAC9D,GACF,EAAM,IAAI,CADE,AACD,CACT,SAAU,UACV,SAAU,EAAO,SAAS,CAC1B,WAAY,EAAO,IAAI,CACvB,SAAU,EAAS,MAAM,CAAC,QAAQ,CAClC,OAAQ,EAAS,MAAM,CACvB,OAAQ,EAAS,MAAM,CACvB,QAAS,EAAS,OAAO,AAC3B,EAEJ,CAEA,OAAO,CACT,CACF"}