{"version":3,"sources":["turbopack:///[project]/lib/api/sleeper-enhanced.ts"],"sourcesContent":["// Enhanced Sleeper API with complete player data\nimport { Player } from '@/lib/types';\n\nconst SLEEPER_BASE_URL = 'https://api.sleeper.app/v1';\n// 2025 NFL Season starts Sept 4, 2025. Today is Sept 28, so we're in Week 4\nconst NFL_SEASON = '2025';\nconst getCurrentNFLWeek = () => {\n  // NFL 2025 season started September 4, 2025\n  const seasonStart = new Date('2025-09-04');\n  const now = new Date();\n  const daysSinceStart = Math.floor((now.getTime() - seasonStart.getTime()) / (1000 * 60 * 60 * 24));\n  const weekNumber = Math.min(18, Math.max(1, Math.floor(daysSinceStart / 7) + 1));\n  return weekNumber;\n};\n\nexport class EnhancedSleeperAPI {\n  private playersCache: Record<string, any> = {};\n  private nflState: any = null;\n\n  async getNFLState() {\n    if (!this.nflState) {\n      const res = await fetch(`${SLEEPER_BASE_URL}/state/nfl`);\n      this.nflState = await res.json();\n    }\n    return this.nflState;\n  }\n\n  async getAllPlayers() {\n    if (Object.keys(this.playersCache).length === 0) {\n      const res = await fetch(`${SLEEPER_BASE_URL}/players/nfl`);\n      this.playersCache = await res.json();\n    }\n    return this.playersCache;\n  }\n\n  async getUser(username: string) {\n    const res = await fetch(`${SLEEPER_BASE_URL}/user/${username}`);\n    if (!res.ok) return null;\n    return res.json();\n  }\n\n  async getUserLeagues(userId: string) {\n    const res = await fetch(`${SLEEPER_BASE_URL}/user/${userId}/leagues/nfl/${NFL_SEASON}`);\n    return res.json();\n  }\n\n  async getCompleteTeamData(username: string, leagueId: string): Promise<any> {\n    try {\n      // Get all necessary data in parallel\n      const [user, league, rosters, users, nflState, players] = await Promise.all([\n        this.getUser(username),\n        fetch(`${SLEEPER_BASE_URL}/league/${leagueId}`).then(r => r.json()),\n        fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/rosters`).then(r => r.json()),\n        fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/users`).then(r => r.json()),\n        this.getNFLState(),\n        this.getAllPlayers(),\n      ]);\n\n      if (!user) throw new Error('User not found');\n\n      // Find user's roster\n      const myRoster = rosters.find((r: any) => \n        r.owner_id === user.user_id || r.co_owners?.includes(user.user_id)\n      );\n      \n      if (!myRoster) throw new Error('Roster not found');\n\n      // Get user's team info\n      const myUser = users.find((u: any) => u.user_id === user.user_id);\n      const teamName = myUser?.metadata?.team_name || myUser?.display_name || username;\n\n      // Get current week matchups - use our calculated week\n      const currentWeek = getCurrentNFLWeek();\n      const matchupsRes = await fetch(`${SLEEPER_BASE_URL}/league/${leagueId}/matchups/${currentWeek}`);\n      const matchups = await matchupsRes.json();\n      \n      const myMatchup = matchups.find((m: any) => m.roster_id === myRoster.roster_id);\n      \n      let matchupData = null;\n      if (myMatchup) {\n        // Find opponent\n        const oppMatchup = matchups.find((m: any) => \n          m.matchup_id === myMatchup.matchup_id && m.roster_id !== myRoster.roster_id\n        );\n        \n        if (oppMatchup) {\n          const oppRoster = rosters.find((r: any) => r.roster_id === oppMatchup.roster_id);\n          const oppUser = users.find((u: any) => u.user_id === oppRoster?.owner_id);\n          const oppName = oppUser?.metadata?.team_name || oppUser?.display_name || 'Unknown';\n          \n          matchupData = {\n            week: currentWeek,\n            teamScore: myMatchup.points || 0,\n            opponentScore: oppMatchup.points || 0,\n            opponentName: oppName,\n            matchupId: myMatchup.matchup_id,\n            starters: myMatchup.starters || [],\n            startersPoints: myMatchup.starters_points || [],\n          };\n        }\n      }\n\n      // Build complete player data\n      const rosterPlayers: Player[] = [];\n      \n      if (myRoster.players && Array.isArray(myRoster.players)) {\n        for (const playerId of myRoster.players) {\n          const playerData = players[playerId];\n          const isStarter = myMatchup?.starters?.includes(playerId);\n          const starterIndex = isStarter ? myMatchup.starters.indexOf(playerId) : -1;\n          const weekPoints = starterIndex >= 0 && myMatchup?.starters_points?.[starterIndex] \n            ? myMatchup.starters_points[starterIndex] : 0;\n          \n          const player: Player = {\n            id: playerId,\n            name: playerData ? `${playerData.first_name} ${playerData.last_name}` : `Player ${playerId}`,\n            position: playerData?.position || 'Unknown',\n            team: playerData?.team || 'FA',\n            jerseyNumber: parseInt(playerData?.number) || 0,\n            status: {\n              isActive: isStarter || false,\n              gameStatus: playerData?.injury_status || 'healthy',\n              lastUpdated: new Date(),\n            },\n            stats: {\n              season: parseInt(NFL_SEASON),\n              week: currentWeek,\n              fantasyPoints: weekPoints,\n              projectedPoints: 0,\n            },\n          };\n\n          if (playerData?.injury_status) {\n            player.injuryStatus = {\n              type: playerData.injury_status,\n              description: playerData.injury_notes || playerData.injury_status,\n              severity: 'unknown',\n              practiceStatus: playerData.practice_participation || 'unknown',\n            };\n          }\n\n          rosterPlayers.push(player);\n        }\n      }\n\n      return {\n        league: {\n          id: league.league_id,\n          name: league.name,\n          size: league.total_rosters,\n          scoringType: league.scoring_settings?.rec ? 'PPR' : 'Standard',\n          season: league.season,\n          status: league.status,\n        },\n        team: {\n          id: myRoster.roster_id,\n          name: teamName,\n          owner: myUser?.display_name || username,\n        },\n        roster: myRoster,\n        record: {\n          wins: myRoster.settings?.wins || 0,\n          losses: myRoster.settings?.losses || 0,\n          ties: myRoster.settings?.ties || 0,\n          pointsFor: myRoster.settings?.fpts || 0, // Season total\n          pointsAgainst: myRoster.settings?.fpts_against || 0,\n          rank: myRoster.settings?.rank || 0,\n        },\n        matchup: matchupData,\n        players: rosterPlayers,\n        currentWeek,\n        metadata: {\n          lastUpdate: new Date(),\n          source: 'sleeper',\n          userId: user.user_id,\n        },\n      };\n    } catch (error) {\n      console.error('Error fetching complete team data:', error);\n      throw error;\n    }\n  }\n\n  async getAllUserTeams(username: string): Promise<any[]> {\n    try {\n      const user = await this.getUser(username);\n      if (!user) throw new Error('User not found');\n\n      const leagues = await this.getUserLeagues(user.user_id);\n      const allTeams = [];\n\n      for (const league of leagues) {\n        try {\n          const teamData = await this.getCompleteTeamData(username, league.league_id);\n          allTeams.push(teamData);\n        } catch (error) {\n          console.error(`Failed to import league ${league.name}:`, error);\n        }\n      }\n\n      return allTeams;\n    } catch (error) {\n      console.error('Error fetching all teams:', error);\n      throw error;\n    }\n  }\n}\n\nexport const enhancedSleeperAPI = new EnhancedSleeperAPI();"],"names":[],"mappings":"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"}