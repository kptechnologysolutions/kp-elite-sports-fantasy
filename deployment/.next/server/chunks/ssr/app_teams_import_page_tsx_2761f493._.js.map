{"version":3,"sources":["turbopack:///[project]/app/teams/import/page.tsx","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/IsRestoringProvider.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/suspense.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/useBaseQuery.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/useQuery.js","turbopack:///[project]/node_modules/@tanstack/query-core/build/modern/mutationObserver.js","turbopack:///[project]/node_modules/@tanstack/react-query/build/modern/useMutation.js","turbopack:///[project]/node_modules/@tanstack/query-core/build/modern/queryObserver.js","turbopack:///[project]/components/teams/TeamImport.tsx","turbopack:///[project]/lib/api/client.ts","turbopack:///[project]/lib/hooks/useTeams.ts"],"sourcesContent":["'use client';\n\nimport { Suspense } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { TeamImport } from '@/components/teams/TeamImport';\n\nfunction TeamImportContent() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const platform = searchParams.get('platform');\n\n  return <TeamImport defaultPlatform={platform || undefined} />;\n}\n\nexport default function TeamImportPage() {\n  return (\n    <main className=\"container mx-auto p-6\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <TeamImportContent />\n      </Suspense>\n    </main>\n  );\n}","\"use client\";\n\n// src/QueryErrorResetBoundary.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createValue() {\n  let isReset = false;\n  return {\n    clearReset: () => {\n      isReset = false;\n    },\n    reset: () => {\n      isReset = true;\n    },\n    isReset: () => {\n      return isReset;\n    }\n  };\n}\nvar QueryErrorResetBoundaryContext = React.createContext(createValue());\nvar useQueryErrorResetBoundary = () => React.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({\n  children\n}) => {\n  const [value] = React.useState(() => createValue());\n  return /* @__PURE__ */ jsx(QueryErrorResetBoundaryContext.Provider, { value, children: typeof children === \"function\" ? children(value) : children });\n};\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary\n};\n//# sourceMappingURL=QueryErrorResetBoundary.js.map","\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"@tanstack/query-core\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = ({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense\n}) => {\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === void 0 || shouldThrowError(throwOnError, [result.error, query]));\n};\nexport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n};\n//# sourceMappingURL=errorBoundaryUtils.js.map","\"use client\";\n\n// src/IsRestoringProvider.ts\nimport * as React from \"react\";\nvar IsRestoringContext = React.createContext(false);\nvar useIsRestoring = () => React.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\nexport {\n  IsRestoringProvider,\n  useIsRestoring\n};\n//# sourceMappingURL=IsRestoringProvider.js.map","// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\nvar ensureSuspenseTimers = (defaultedOptions) => {\n  if (defaultedOptions.suspense) {\n    const MIN_SUSPENSE_TIME_MS = 1e3;\n    const clamp = (value) => value === \"static\" ? value : Math.max(value ?? MIN_SUSPENSE_TIME_MS, MIN_SUSPENSE_TIME_MS);\n    const originalStaleTime = defaultedOptions.staleTime;\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? (...args) => clamp(originalStaleTime(...args)) : clamp(originalStaleTime);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(\n        defaultedOptions.gcTime,\n        MIN_SUSPENSE_TIME_MS\n      );\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport {\n  defaultThrowOnError,\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n};\n//# sourceMappingURL=suspense.js.map","\"use client\";\n\n// src/useBaseQuery.ts\nimport * as React from \"react\";\nimport { isServer, noop, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n} from \"./errorBoundaryUtils.js\";\nimport { useIsRestoring } from \"./IsRestoringProvider.js\";\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n} from \"./suspense.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'\n      );\n    }\n  }\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const client = useQueryClient(queryClient);\n  const defaultedOptions = client.defaultQueryOptions(options);\n  client.getDefaultOptions().queries?._experimental_beforeQuery?.(\n    defaultedOptions\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`\n      );\n    }\n  }\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureSuspenseTimers(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);\n  const [observer] = React.useState(\n    () => new Observer(\n      client,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop;\n        observer.updateResult();\n        return unsubscribe;\n      },\n      [observer, shouldSubscribe]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions);\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: client.getQueryCache().get(defaultedOptions.queryHash),\n    suspense: defaultedOptions.suspense\n  })) {\n    throw result.error;\n  }\n  ;\n  client.getDefaultOptions().queries?._experimental_afterQuery?.(\n    defaultedOptions,\n    result\n  );\n  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {\n    const promise = isNewCacheEntry ? (\n      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n    ) : (\n      // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n      client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n    );\n    promise?.catch(noop).finally(() => {\n      observer.updateResult();\n    });\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","\"use client\";\n\n// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map","// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  #client;\n  #currentResult = void 0;\n  #currentMutation;\n  #mutateOptions;\n  constructor(client, options) {\n    super();\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    } else if (this.#currentMutation?.state.status === \"pending\") {\n      this.#currentMutation.setOptions(this.options);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const onMutateResult = this.#currentResult.context;\n        const context = {\n          client: this.#client,\n          meta: this.options.meta,\n          mutationKey: this.options.mutationKey\n        };\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(\n            action.data,\n            variables,\n            onMutateResult,\n            context\n          );\n          this.#mutateOptions.onSettled?.(\n            action.data,\n            null,\n            variables,\n            onMutateResult,\n            context\n          );\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(\n            action.error,\n            variables,\n            onMutateResult,\n            context\n          );\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            variables,\n            onMutateResult,\n            context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport {\n  MutationObserver,\n  noop,\n  notifyManager,\n  shouldThrowError\n} from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map","// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nimport { timeoutManager } from \"./timeoutManager.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\n        \"Expected enabled to be a boolean or a callback that returns a boolean\"\n      );\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key);\n        onPropTracked?.(key);\n        if (key === \"promise\" && !this.options.experimental_prefetchInRender && this.#currentThenable.status === \"pending\") {\n          this.#currentThenable.reject(\n            new Error(\n              \"experimental_prefetchInRender feature flag is not enabled\"\n            )\n          );\n        }\n        return Reflect.get(target, key);\n      }\n    });\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery\n    );\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = timeoutManager.setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = timeoutManager.setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      timeoutManager.clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      timeoutManager.clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let newState = { ...state };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let { error, errorUpdatedAt, status } = newState;\n    data = newState.data;\n    let skipSelect = false;\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n        skipSelect = true;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (options.select && data !== void 0 && !skipSelect) {\n      if (prevResult && data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable) => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult() {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    this.#notify({ listeners: shouldNotifyListeners() });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false && resolveStaleTime(options.staleTime, query) !== \"static\") {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Upload, Link2, Loader2, CheckCircle, AlertCircle } from 'lucide-react';\nimport { useImportTeam } from '@/lib/hooks/useTeams';\n\nconst platforms = [\n  { id: 'espn', name: 'ESPN', logo: '🏈', color: 'bg-red-500' },\n  { id: 'yahoo', name: 'Yahoo', logo: '🟣', color: 'bg-purple-500' },\n  { id: 'sleeper', name: 'Sleeper', logo: '😴', color: 'bg-orange-500' },\n  { id: 'nfl', name: 'NFL.com', logo: '🏆', color: 'bg-blue-600' },\n  { id: 'cbs', name: 'CBS Sports', logo: '📺', color: 'bg-blue-500' },\n];\n\ninterface TeamImportProps {\n  defaultPlatform?: string;\n}\n\nexport function TeamImport({ defaultPlatform }: TeamImportProps = {}) {\n  const searchParams = useSearchParams();\n  const [selectedPlatform, setSelectedPlatform] = useState(defaultPlatform || '');\n  const [importMethod, setImportMethod] = useState<'oauth' | 'manual'>('oauth');\n  const [manualData, setManualData] = useState({ leagueId: '', teamId: '' });\n  const [sleeperUsername, setSleeperUsername] = useState('');\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n  const [importError, setImportError] = useState('');\n  const [availableLeagues, setAvailableLeagues] = useState<any[]>([]);\n  const [selectedLeagues, setSelectedLeagues] = useState<string[]>([]);\n  const [showYahooDemo, setShowYahooDemo] = useState(false);\n  const importTeam = useImportTeam();\n\n  useEffect(() => {\n    // Check if returning from OAuth flow\n    if (searchParams.get('import') === 'success' && searchParams.get('platform')) {\n      setShowSuccess(true);\n      setTimeout(() => setShowSuccess(false), 5000);\n    }\n  }, [searchParams]);\n\n  const handlePlatformSelect = (platformId: string) => {\n    setSelectedPlatform(platformId);\n  };\n\n  const handleCheckSleeperUsername = async () => {\n    if (!sleeperUsername) {\n      setImportError('Please enter your Sleeper username');\n      return;\n    }\n\n    setIsImporting(true);\n    setImportError('');\n    \n    try {\n      const { sleeperAPI } = await import('@/lib/api/sleeper');\n      \n      // Get user info\n      const user = await sleeperAPI.getUser(sleeperUsername);\n      if (!user) {\n        setImportError(`Username \"${sleeperUsername}\" not found on Sleeper`);\n        setIsImporting(false);\n        return;\n      }\n\n      // Get user's leagues\n      const leagues = await sleeperAPI.getUserLeagues(user.user_id);\n      if (leagues.length === 0) {\n        setImportError('No leagues found for this user');\n        setIsImporting(false);\n        return;\n      }\n\n      // Show available leagues\n      setAvailableLeagues(leagues);\n      setSelectedLeagues(leagues.map(l => l.league_id)); // Select all by default\n      setIsImporting(false);\n    } catch (error) {\n      console.error('Error checking Sleeper username:', error);\n      setImportError('Failed to connect to Sleeper. Please try again.');\n      setIsImporting(false);\n    }\n  };\n\n  const handleImportSleeperTeams = async () => {\n    if (selectedLeagues.length === 0) {\n      setImportError('Please select at least one league to import');\n      return;\n    }\n\n    setIsImporting(true);\n    setImportError('');\n\n    try {\n      const { enhancedSleeperAPI } = await import('@/lib/api/sleeper-enhanced');\n      const teamStore = (await import('@/lib/store/teamStore')).default;\n      \n      let importedCount = 0;\n\n      for (const leagueId of selectedLeagues) {\n        const league = availableLeagues.find(l => l.league_id === leagueId);\n        if (!league) continue;\n\n        // Use the enhanced API to get complete team data\n        const teamData = await enhancedSleeperAPI.getCompleteTeamData(sleeperUsername, leagueId);\n        if (!teamData) continue;\n\n        console.log('Enhanced Team Data:', {\n          league: teamData.league.name,\n          teamName: teamData.team.name,\n          week: teamData.currentWeek,\n          weekScore: teamData.matchup?.teamScore,\n          opponent: teamData.matchup?.opponentName,\n          players: teamData.players?.length\n        });\n\n        // Import to our store with COMPLETE data including player names\n        const newTeam = teamStore.importTeamFromAPI('sleeper', {\n          leagueId: teamData.league.id,\n          leagueName: teamData.league.name,\n          teamName: teamData.team.name,\n          players: teamData.players || [], // Now includes full player objects with names\n          record: {\n            wins: teamData.record.wins,\n            losses: teamData.record.losses,\n            ties: teamData.record.ties,\n            pointsFor: teamData.record.pointsFor, // Season total\n            pointsAgainst: teamData.record.pointsAgainst,\n            streak: `${teamData.record.wins > teamData.record.losses ? 'W' : 'L'}1`\n          },\n          matchup: teamData.matchup ? {\n            points: teamData.matchup.teamScore, // Week score\n            opponentScore: teamData.matchup.opponentScore,\n            opponentName: teamData.matchup.opponentName,\n            week: teamData.matchup.week,\n            starters: teamData.matchup.starters,\n            startersPoints: teamData.matchup.startersPoints\n          } : undefined,\n          leagueSize: teamData.league.size,\n          rank: teamData.record.rank || 1,\n          currentWeek: teamData.currentWeek\n        });\n\n        if (newTeam) {\n          importedCount++;\n        }\n      }\n\n      if (importedCount > 0) {\n        setShowSuccess(true);\n        setImportError('');\n        setTimeout(() => {\n          window.location.reload();\n        }, 2000);\n      } else {\n        setImportError('No teams could be imported');\n      }\n    } catch (error) {\n      console.error('Import failed:', error);\n      setImportError('Failed to import teams. Please try again.');\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const handleImport = async () => {\n    if (!selectedPlatform) return;\n\n    // Special handling for Sleeper\n    if (selectedPlatform === 'sleeper' && importMethod === 'oauth') {\n      if (availableLeagues.length > 0) {\n        // Import selected leagues\n        await handleImportSleeperTeams();\n      } else {\n        // Check username first\n        await handleCheckSleeperUsername();\n      }\n      return;\n    }\n\n    setIsImporting(true);\n    setImportError('');\n\n    try {\n      const teamStore = (await import('@/lib/store/teamStore')).default;\n      \n      // Handle ESPN import with real data\n      if (selectedPlatform === 'espn') {\n        if (importMethod === 'manual' && manualData.leagueId) {\n          const { espnRealDataService } = await import('@/lib/services/espnRealDataService');\n          \n          // If we have cookies, set them\n          if (manualData.teamId) {\n            // teamId field can be used for espnS2 cookie\n            const swid = localStorage.getItem('espn_swid') || '';\n            if (manualData.teamId && swid) {\n              espnRealDataService.setCookies(manualData.teamId, swid);\n            }\n          }\n          \n          const teams = await espnRealDataService.importLeague(manualData.leagueId);\n          \n          if (teams.length > 0) {\n            for (const team of teams) {\n              teamStore.addTeam(team);\n            }\n            setShowSuccess(true);\n            setTimeout(() => window.location.reload(), 2000);\n          } else {\n            setImportError('No teams found or unable to access league. Make sure the league is public or provide authentication.');\n          }\n        } else {\n          setImportError('Please enter your ESPN League ID');\n        }\n        setIsImporting(false);\n        return;\n      }\n      \n      // Handle Yahoo import with OAuth\n      if (selectedPlatform === 'yahoo') {\n        if (importMethod === 'oauth') {\n          // Always initiate OAuth flow for Yahoo\n          const clientId = process.env.NEXT_PUBLIC_YAHOO_CLIENT_ID;\n          \n          // For demo purposes, if OAuth isn't configured, show demo option\n          if (!clientId || clientId === 'your_yahoo_client_id_here') {\n            setShowYahooDemo(true);\n            setImportError('');\n            setIsImporting(false);\n            return;\n          } else {\n            // Initiate real Yahoo OAuth flow\n            const redirectUri = `${window.location.origin}/api/auth/yahoo/callback`;\n            const scope = 'fspt-r'; // Fantasy Sports read permission\n            const authUrl = `https://api.login.yahoo.com/oauth2/request_auth?` +\n              `client_id=${clientId}&` +\n              `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n              `response_type=code&` +\n              `scope=${scope}&` +\n              `language=en-us`;\n            \n            // Save current state\n            localStorage.setItem('yahoo_import_initiated', 'true');\n            \n            // Redirect to Yahoo for authorization\n            window.location.href = authUrl;\n          }\n        } else if (importMethod === 'manual' && manualData.leagueId) {\n          // Manual import with league ID\n          const mockYahooTeam = teamStore.importTeam('yahoo', {\n            leagueId: manualData.leagueId,\n            teamId: manualData.teamId || `yahoo_team_${Date.now()}`,\n            leagueName: manualData.leagueId === 'demo' ? 'Yahoo Demo League' : `Yahoo League ${manualData.leagueId}`,\n          });\n          \n          if (mockYahooTeam) {\n            setShowSuccess(true);\n            setImportError('');\n            setTimeout(() => window.location.reload(), 2000);\n          } else {\n            setImportError('Failed to import Yahoo team.');\n          }\n        } else {\n          setImportError('Please select an import method');\n        }\n        setIsImporting(false);\n        return;\n      }\n\n      // For other platforms, use enhanced mock import with better data\n      const newTeam = teamStore.importTeam(selectedPlatform, {\n        leagueId: `${selectedPlatform}_league_${Date.now()}`,\n        teamId: `${selectedPlatform}_team_${Date.now()}`,\n        leagueName: `${platforms.find(p => p.id === selectedPlatform)?.name} League`,\n      });\n      \n      setShowSuccess(true);\n      setTimeout(() => {\n        setShowSuccess(false);\n        window.location.reload();\n      }, 2000);\n    } catch (error) {\n      console.error('Import failed:', error);\n      setImportError('Failed to import team. Please check your credentials and try again.');\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const handleImportWithRealData = async () => {\n    if (!selectedPlatform) return;\n\n    // Special handling for Sleeper\n    if (selectedPlatform === 'sleeper' && importMethod === 'oauth') {\n      if (availableLeagues.length > 0) {\n        // Import selected leagues\n        await handleImportSleeperTeams();\n      } else {\n        // Check username first\n        await handleCheckSleeperUsername();\n      }\n      return;\n    }\n\n    if (importMethod === 'oauth') {\n      // For other platforms with OAuth support\n      await handleImport();\n    } else {\n      // Manual import with IDs\n      try {\n        const teamStore = (await import('@/lib/store/teamStore')).default;\n        const newTeam = teamStore.importTeam(selectedPlatform, {\n          leagueId: manualData.leagueId,\n          teamId: manualData.teamId,\n          leagueName: `${platforms.find(p => p.id === selectedPlatform)?.name} League`,\n        });\n        \n        setShowSuccess(true);\n        setTimeout(() => {\n          setShowSuccess(false);\n          window.location.reload();\n        }, 2000);\n      } catch (error) {\n        console.error('Manual import failed:', error);\n      }\n    }\n  };\n\n  const handleCSVUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Process CSV file\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        // Parse CSV and import team\n        console.log('CSV content:', event.target?.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {showSuccess && (\n        <Card className=\"border-green-500 bg-green-50 dark:bg-green-950\">\n          <CardContent className=\"flex items-center space-x-2 pt-6\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            <p className=\"text-green-700 dark:text-green-300\">\n              Team successfully imported from {searchParams.get('platform')?.toUpperCase()}!\n            </p>\n          </CardContent>\n        </Card>\n      )}\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Import Your Fantasy Team</CardTitle>\n          <CardDescription>\n            Connect your existing fantasy football team from any major platform\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-6\">\n            {platforms.map((platform) => (\n              <button\n                key={platform.id}\n                onClick={() => handlePlatformSelect(platform.id)}\n                className={`relative p-4 rounded-lg border-2 transition-all ${\n                  selectedPlatform === platform.id\n                    ? 'border-primary bg-primary/5'\n                    : 'border-muted hover:border-muted-foreground/50'\n                }`}\n              >\n                <div className=\"text-3xl mb-2\">{platform.logo}</div>\n                <div className=\"text-sm font-medium\">{platform.name}</div>\n                {selectedPlatform === platform.id && (\n                  <CheckCircle className=\"absolute top-2 right-2 h-4 w-4 text-primary\" />\n                )}\n              </button>\n            ))}\n          </div>\n\n          {selectedPlatform && (\n            <Tabs value={importMethod} onValueChange={(v) => setImportMethod(v as 'oauth' | 'manual')}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"oauth\">\n                  <Link2 className=\"mr-2 h-4 w-4\" />\n                  Quick Connect\n                </TabsTrigger>\n                <TabsTrigger value=\"manual\">\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Manual Import\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"oauth\" className=\"space-y-4\">\n                {selectedPlatform === 'sleeper' ? (\n                  <div className=\"space-y-4\">\n                    {availableLeagues.length === 0 ? (\n                      <>\n                        <div>\n                          <Label htmlFor=\"sleeper-username\">Sleeper Username</Label>\n                          <div className=\"flex gap-2 mt-1\">\n                            <Input\n                              id=\"sleeper-username\"\n                              placeholder=\"Enter your Sleeper username\"\n                              value={sleeperUsername}\n                              onChange={(e) => setSleeperUsername(e.target.value)}\n                              onKeyDown={(e) => {\n                                if (e.key === 'Enter') handleCheckSleeperUsername();\n                              }}\n                            />\n                            <Button \n                              onClick={handleCheckSleeperUsername} \n                              disabled={isImporting || !sleeperUsername}\n                            >\n                              {isImporting ? (\n                                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                              ) : (\n                                'Find Leagues'\n                              )}\n                            </Button>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mt-2\">\n                            Enter your Sleeper username (not email) to find your leagues\n                          </p>\n                        </div>\n                        \n                        {importError && (\n                          <div className=\"p-3 rounded-lg border border-red-500 bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 text-sm\">\n                            {importError}\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label>Select Leagues to Import</Label>\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            Found {availableLeagues.length} league{availableLeagues.length !== 1 ? 's' : ''} for @{sleeperUsername}\n                          </p>\n                          <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                            {availableLeagues.map((league) => (\n                              <div \n                                key={league.league_id}\n                                className=\"flex items-center space-x-3 p-3 rounded-lg border hover:bg-accent transition-colors\"\n                              >\n                                <input\n                                  type=\"checkbox\"\n                                  id={league.league_id}\n                                  checked={selectedLeagues.includes(league.league_id)}\n                                  onChange={(e) => {\n                                    if (e.target.checked) {\n                                      setSelectedLeagues([...selectedLeagues, league.league_id]);\n                                    } else {\n                                      setSelectedLeagues(selectedLeagues.filter(id => id !== league.league_id));\n                                    }\n                                  }}\n                                  className=\"h-4 w-4 rounded border-gray-300\"\n                                />\n                                <label \n                                  htmlFor={league.league_id}\n                                  className=\"flex-1 cursor-pointer\"\n                                >\n                                  <div className=\"font-medium\">{league.name}</div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {league.total_rosters} teams • {league.season} {league.season_type}\n                                  </div>\n                                </label>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button \n                            onClick={handleImportSleeperTeams}\n                            disabled={isImporting || selectedLeagues.length === 0}\n                            className=\"flex-1\"\n                          >\n                            {isImporting ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Importing...\n                              </>\n                            ) : (\n                              <>\n                                <Upload className=\"mr-2 h-4 w-4\" />\n                                Import {selectedLeagues.length} League{selectedLeagues.length !== 1 ? 's' : ''}\n                              </>\n                            )}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setAvailableLeagues([]);\n                              setSelectedLeagues([]);\n                              setImportError('');\n                            }}\n                          >\n                            Change User\n                          </Button>\n                        </div>\n\n                        {importError && (\n                          <div className=\"p-3 rounded-lg border border-red-500 bg-red-50 dark:bg-red-950 text-red-700 dark:text-red-300 text-sm\">\n                            {importError}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    {selectedPlatform === 'yahoo' ? (\n                      showYahooDemo ? (\n                        // Show demo option when OAuth is not configured\n                        <div className=\"space-y-4\">\n                          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-purple-100 dark:bg-purple-900 mb-4\">\n                            <span className=\"text-3xl\">🟣</span>\n                          </div>\n                          <div className=\"max-w-md mx-auto space-y-4\">\n                            <div className=\"p-4 rounded-lg bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800\">\n                              <h3 className=\"font-semibold mb-2\">Yahoo OAuth Not Configured</h3>\n                              <p className=\"text-sm text-muted-foreground mb-3\">\n                                To connect real Yahoo leagues, you need to set up OAuth credentials.\n                              </p>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => window.open('/teams/import/yahoo/setup', '_blank')}\n                                className=\"w-full mb-2\"\n                              >\n                                View Setup Instructions\n                              </Button>\n                            </div>\n                            \n                            <div className=\"relative\">\n                              <div className=\"absolute inset-0 flex items-center\">\n                                <span className=\"w-full border-t\" />\n                              </div>\n                              <div className=\"relative flex justify-center text-xs uppercase\">\n                                <span className=\"bg-background px-2 text-muted-foreground\">Or</span>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-3\">\n                              <p className=\"text-sm text-muted-foreground\">\n                                Try HalGrid with demo data to explore all features\n                              </p>\n                              <Button\n                                onClick={() => {\n                                  import('@/lib/store/teamStore').then(({ default: teamStore }) => {\n                                    const mockYahooTeam = teamStore.importTeam('yahoo', {\n                                      leagueId: `yahoo_demo_${Date.now()}`,\n                                      teamId: `yahoo_team_${Date.now()}`,\n                                      leagueName: 'Yahoo Demo League',\n                                    });\n                                    \n                                    if (mockYahooTeam) {\n                                      setShowSuccess(true);\n                                      setShowYahooDemo(false);\n                                      setTimeout(() => window.location.href = '/dashboard', 1500);\n                                    }\n                                  });\n                                }}\n                                className=\"w-full bg-purple-500 hover:bg-purple-600\"\n                              >\n                                <Upload className=\"mr-2 h-4 w-4\" />\n                                Use Demo Yahoo Team\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <>\n                          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-purple-100 dark:bg-purple-900 mb-4\">\n                            <span className=\"text-3xl\">🟣</span>\n                          </div>\n                          <p className=\"text-muted-foreground mb-4\">\n                            Sign in with your Yahoo account to import your fantasy teams\n                          </p>\n                          <Button \n                            onClick={handleImport} \n                            disabled={importTeam.isPending}\n                            className=\"bg-purple-500 hover:bg-purple-600\"\n                          >\n                            {importTeam.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Redirecting to Yahoo...\n                              </>\n                            ) : (\n                              <>\n                                <Link2 className=\"mr-2 h-4 w-4\" />\n                                Sign in with Yahoo\n                              </>\n                            )}\n                          </Button>\n                          <p className=\"text-xs text-muted-foreground mt-4\">\n                            You'll be redirected to Yahoo to authorize access\n                          </p>\n                        </>\n                      )\n                    ) : (\n                      <>\n                        <p className=\"text-muted-foreground mb-4\">\n                          We'll securely connect to your {platforms.find(p => p.id === selectedPlatform)?.name} account\n                        </p>\n                        <Button onClick={handleImport} disabled={importTeam.isPending}>\n                          {importTeam.isPending ? (\n                            <>\n                              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              Connecting...\n                            </>\n                          ) : (\n                            <>\n                              <Link2 className=\"mr-2 h-4 w-4\" />\n                              Connect to {platforms.find(p => p.id === selectedPlatform)?.name}\n                            </>\n                          )}\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"manual\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"leagueId\">League ID</Label>\n                    <Input\n                      id=\"leagueId\"\n                      placeholder=\"Enter your league ID\"\n                      value={manualData.leagueId}\n                      onChange={(e) => setManualData({ ...manualData, leagueId: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"teamId\">Team ID</Label>\n                    <Input\n                      id=\"teamId\"\n                      placeholder=\"Enter your team ID\"\n                      value={manualData.teamId}\n                      onChange={(e) => setManualData({ ...manualData, teamId: e.target.value })}\n                    />\n                  </div>\n                  <Button onClick={handleImport} className=\"w-full\" disabled={importTeam.isPending}>\n                    {importTeam.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Importing...\n                      </>\n                    ) : (\n                      'Import Team'\n                    )}\n                  </Button>\n                </div>\n              </TabsContent>\n            </Tabs>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Yahoo OAuth Info Card */}\n      {selectedPlatform === 'yahoo' && importMethod === 'oauth' && !showYahooDemo && (\n        <Card className=\"border-purple-200 dark:border-purple-800 bg-purple-50 dark:bg-purple-950/20\">\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-purple-600\" />\n              Yahoo Authentication Process\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm\">\n            <p>When you click \"Sign in with Yahoo\":</p>\n            <ol className=\"list-decimal list-inside space-y-2 text-muted-foreground\">\n              <li>You'll be redirected to Yahoo's secure login page</li>\n              <li>Sign in with your Yahoo account credentials</li>\n              <li>Authorize HalGrid to access your fantasy data (read-only)</li>\n              <li>You'll be redirected back to select which leagues to import</li>\n            </ol>\n            <div className=\"pt-2 border-t\">\n              <p className=\"text-xs text-muted-foreground\">\n                💡 <strong>Note:</strong> We only request read access to your fantasy sports data. \n                We cannot make changes to your teams or leagues.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Upload CSV</CardTitle>\n          <CardDescription>\n            Have your roster in a spreadsheet? Upload a CSV file\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-8 text-center\">\n            <Upload className=\"mx-auto h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <Label htmlFor=\"csv-upload\" className=\"cursor-pointer\">\n              <span className=\"text-primary underline\">Click to upload</span> or drag and drop\n            </Label>\n            <Input\n              id=\"csv-upload\"\n              type=\"file\"\n              accept=\".csv\"\n              className=\"hidden\"\n              onChange={handleCSVUpload}\n            />\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              CSV files only. Max size: 5MB\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","import { Player, Team, NewsItem, AIInsight, LineupRecommendation } from '@/lib/types';\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || '/api';\n\nclass APIClient {\n  private async fetchWithAuth(url: string, options: RequestInit = {}) {\n    const response = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  // Team Management\n  async getTeams(): Promise<Team[]> {\n    return this.fetchWithAuth('/teams');\n  }\n\n  async getTeam(teamId: string): Promise<Team> {\n    return this.fetchWithAuth(`/teams/${teamId}`);\n  }\n\n  async importTeam(platform: string, credentials: any): Promise<Team> {\n    return this.fetchWithAuth('/teams/import', {\n      method: 'POST',\n      body: JSON.stringify({ platform, credentials }),\n    });\n  }\n\n  async updateTeam(teamId: string, data: Partial<Team>): Promise<Team> {\n    return this.fetchWithAuth(`/teams/${teamId}`, {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Player Management\n  async getPlayer(playerId: string): Promise<Player> {\n    return this.fetchWithAuth(`/players/${playerId}`);\n  }\n\n  async getPlayerNews(playerId: string): Promise<NewsItem[]> {\n    return this.fetchWithAuth(`/players/${playerId}/news`);\n  }\n\n  async getPlayerInsights(playerId: string): Promise<AIInsight[]> {\n    return this.fetchWithAuth(`/players/${playerId}/insights`);\n  }\n\n  async refreshPlayerData(playerId: string): Promise<Player> {\n    return this.fetchWithAuth(`/players/${playerId}/refresh`, {\n      method: 'POST',\n    });\n  }\n\n  // AI Features\n  async getLineupRecommendations(teamId: string, week: number): Promise<LineupRecommendation> {\n    return this.fetchWithAuth(`/ai/lineup-recommendations?teamId=${teamId}&week=${week}`);\n  }\n\n  async analyzePlayer(playerId: string): Promise<AIInsight[]> {\n    return this.fetchWithAuth(`/ai/analyze-player/${playerId}`, {\n      method: 'POST',\n    });\n  }\n\n  async searchNews(query: string): Promise<NewsItem[]> {\n    return this.fetchWithAuth(`/ai/search-news?q=${encodeURIComponent(query)}`);\n  }\n\n  // Real-time Updates\n  subscribeToPlayerUpdates(playerId: string, callback: (data: any) => void) {\n    // WebSocket implementation will go here\n    const ws = new WebSocket(`${process.env.NEXT_PUBLIC_WS_URL}/players/${playerId}`);\n    \n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      callback(data);\n    };\n\n    return () => ws.close();\n  }\n\n  subscribeToTeamUpdates(teamId: string, callback: (data: any) => void) {\n    const ws = new WebSocket(`${process.env.NEXT_PUBLIC_WS_URL}/teams/${teamId}`);\n    \n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      callback(data);\n    };\n\n    return () => ws.close();\n  }\n}\n\nexport const apiClient = new APIClient();","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api/client';\nimport { Team } from '@/lib/types';\n\nexport function useTeams() {\n  return useQuery({\n    queryKey: ['teams'],\n    queryFn: () => apiClient.getTeams(),\n  });\n}\n\nexport function useTeam(teamId: string) {\n  return useQuery({\n    queryKey: ['teams', teamId],\n    queryFn: () => apiClient.getTeam(teamId),\n    enabled: !!teamId,\n  });\n}\n\nexport function useImportTeam() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ platform, credentials }: { platform: string; credentials: any }) => \n      apiClient.importTeam(platform, credentials),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['teams'] });\n      queryClient.setQueryData(['teams', data.id], data);\n    },\n  });\n}\n\nexport function useUpdateTeam(teamId: string) {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (data: Partial<Team>) => apiClient.updateTeam(teamId, data),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['teams'] });\n      queryClient.setQueryData(['teams', teamId], data);\n    },\n  });\n}"],"names":[],"mappings":"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","ignoreList":[1,2,3,4,5,6,7,8,9]}