(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,99749,t=>{"use strict";function e(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}t.s(["_",()=>e])},98525,t=>{"use strict";t.s(["EnhancedSleeperAPI",()=>n,"enhancedSleeperAPI",()=>r]);var e=t.i(99749);let a="https://api.sleeper.app/v1",s="2025";class n{async getNFLState(){if(!this.nflState){let t=await fetch("".concat(a,"/state/nfl"));this.nflState=await t.json()}return this.nflState}async getAllPlayers(){if(0===Object.keys(this.playersCache).length){let t=await fetch("".concat(a,"/players/nfl"));this.playersCache=await t.json()}return this.playersCache}async getUser(t){let e=await fetch("".concat(a,"/user/").concat(t));return e.ok?e.json():null}async getUserLeagues(t){return(await fetch("".concat(a,"/user/").concat(t,"/leagues/nfl/").concat(s))).json()}async getCompleteTeamData(t,e){try{var n,r,i,o,l,c,u,d,p,h,f;let[m,_,g,y,w,v]=await Promise.all([this.getUser(t),fetch("".concat(a,"/league/").concat(e)).then(t=>t.json()),fetch("".concat(a,"/league/").concat(e,"/rosters")).then(t=>t.json()),fetch("".concat(a,"/league/").concat(e,"/users")).then(t=>t.json()),this.getNFLState(),this.getAllPlayers()]);if(!m)throw Error("User not found");let j=g.find(t=>{var e;return t.owner_id===m.user_id||(null==(e=t.co_owners)?void 0:e.includes(m.user_id))});if(!j)throw Error("Roster not found");let S=y.find(t=>t.user_id===m.user_id),P=(null==S||null==(n=S.metadata)?void 0:n.team_name)||(null==S?void 0:S.display_name)||t,U=(()=>{let t=new Date("2025-09-04");return Math.min(18,Math.max(1,Math.floor(Math.floor((new Date().getTime()-t.getTime())/864e5)/7)+1))})(),A=await fetch("".concat(a,"/league/").concat(e,"/matchups/").concat(U)),b=await A.json(),k=b.find(t=>t.roster_id===j.roster_id),T=null;if(k){let t=b.find(t=>t.matchup_id===k.matchup_id&&t.roster_id!==j.roster_id);if(t){let e=g.find(e=>e.roster_id===t.roster_id),a=y.find(t=>t.user_id===(null==e?void 0:e.owner_id)),s=(null==a||null==(p=a.metadata)?void 0:p.team_name)||(null==a?void 0:a.display_name)||"Unknown";T={week:U,teamScore:k.points||0,opponentScore:t.points||0,opponentName:s,matchupId:k.matchup_id,starters:k.starters||[],startersPoints:k.starters_points||[]}}}let C=[];if(j.players&&Array.isArray(j.players))for(let t of j.players){let e=v[t],a=null==k||null==(h=k.starters)?void 0:h.includes(t),n=a?k.starters.indexOf(t):-1,r=n>=0&&(null==k||null==(f=k.starters_points)?void 0:f[n])?k.starters_points[n]:0,i={id:t,name:e?"".concat(e.first_name," ").concat(e.last_name):"Player ".concat(t),position:(null==e?void 0:e.position)||"Unknown",team:(null==e?void 0:e.team)||"FA",jerseyNumber:parseInt(null==e?void 0:e.number)||0,status:{isActive:a||!1,gameStatus:(null==e?void 0:e.injury_status)||"healthy",lastUpdated:new Date},stats:{season:parseInt(s),week:U,fantasyPoints:r,projectedPoints:0}};(null==e?void 0:e.injury_status)&&(i.injuryStatus={type:e.injury_status,description:e.injury_notes||e.injury_status,severity:"unknown",practiceStatus:e.practice_participation||"unknown"}),C.push(i)}return{league:{id:_.league_id,name:_.name,size:_.total_rosters,scoringType:(null==(r=_.scoring_settings)?void 0:r.rec)?"PPR":"Standard",season:_.season,status:_.status},team:{id:j.roster_id,name:P,owner:(null==S?void 0:S.display_name)||t},roster:j,record:{wins:(null==(i=j.settings)?void 0:i.wins)||0,losses:(null==(o=j.settings)?void 0:o.losses)||0,ties:(null==(l=j.settings)?void 0:l.ties)||0,pointsFor:(null==(c=j.settings)?void 0:c.fpts)||0,pointsAgainst:(null==(u=j.settings)?void 0:u.fpts_against)||0,rank:(null==(d=j.settings)?void 0:d.rank)||0},matchup:T,players:C,currentWeek:U,metadata:{lastUpdate:new Date,source:"sleeper",userId:m.user_id}}}catch(t){throw console.error("Error fetching complete team data:",t),t}}async getAllUserTeams(t){try{let e=await this.getUser(t);if(!e)throw Error("User not found");let a=await this.getUserLeagues(e.user_id),s=[];for(let e of a)try{let a=await this.getCompleteTeamData(t,e.league_id);s.push(a)}catch(t){console.error("Failed to import league ".concat(e.name,":"),t)}return s}catch(t){throw console.error("Error fetching all teams:",t),t}}constructor(){(0,e._)(this,"playersCache",{}),(0,e._)(this,"nflState",null)}}let r=new n}]);