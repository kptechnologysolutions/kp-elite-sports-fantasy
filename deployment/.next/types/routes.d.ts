// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin" | "/coach" | "/dashboard" | "/dashboard/redesigned" | "/dashboard/sleeper" | "/dashboard/tecmo" | "/dynasty" | "/gameday" | "/login" | "/matchup/[teamId]" | "/matchups" | "/players" | "/players/[playerId]" | "/portfolio" | "/roster" | "/roster/sleeper" | "/scores" | "/settings" | "/stats/sleeper" | "/team-import" | "/teams" | "/teams/import" | "/teams/import/yahoo/select" | "/teams/import/yahoo/setup" | "/teams/manage" | "/trade-center" | "/trades" | "/trades/sleeper" | "/waiver-wire" | "/waivers/sleeper"
type AppRouteHandlerRoutes = "/api/ai/lineup-recommendations" | "/api/auth/[platform]" | "/api/auth/yahoo/callback" | "/api/auth/yahoo/leagues" | "/api/auth/yahoo/team" | "/api/gameday/live" | "/api/import/csv" | "/api/import/sleeper" | "/api/live/stream" | "/api/news/espn" | "/api/news/general" | "/api/news/yahoo" | "/api/players/[playerId]" | "/api/players/[playerId]/insights" | "/api/players/[playerId]/news" | "/api/rosters" | "/api/teams" | "/api/teams/[teamId]" | "/api/teams/import" | "/api/test-sleeper"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin": {}
  "/api/ai/lineup-recommendations": {}
  "/api/auth/[platform]": { "platform": string; }
  "/api/auth/yahoo/callback": {}
  "/api/auth/yahoo/leagues": {}
  "/api/auth/yahoo/team": {}
  "/api/gameday/live": {}
  "/api/import/csv": {}
  "/api/import/sleeper": {}
  "/api/live/stream": {}
  "/api/news/espn": {}
  "/api/news/general": {}
  "/api/news/yahoo": {}
  "/api/players/[playerId]": { "playerId": string; }
  "/api/players/[playerId]/insights": { "playerId": string; }
  "/api/players/[playerId]/news": { "playerId": string; }
  "/api/rosters": {}
  "/api/teams": {}
  "/api/teams/[teamId]": { "teamId": string; }
  "/api/teams/import": {}
  "/api/test-sleeper": {}
  "/coach": {}
  "/dashboard": {}
  "/dashboard/redesigned": {}
  "/dashboard/sleeper": {}
  "/dashboard/tecmo": {}
  "/dynasty": {}
  "/gameday": {}
  "/login": {}
  "/matchup/[teamId]": { "teamId": string; }
  "/matchups": {}
  "/players": {}
  "/players/[playerId]": { "playerId": string; }
  "/portfolio": {}
  "/roster": {}
  "/roster/sleeper": {}
  "/scores": {}
  "/settings": {}
  "/stats/sleeper": {}
  "/team-import": {}
  "/teams": {}
  "/teams/import": {}
  "/teams/import/yahoo/select": {}
  "/teams/import/yahoo/setup": {}
  "/teams/manage": {}
  "/trade-center": {}
  "/trades": {}
  "/trades/sleeper": {}
  "/waiver-wire": {}
  "/waivers/sleeper": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
