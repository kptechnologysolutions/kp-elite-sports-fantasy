generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  profiles Profile[]
  leagues  League[]
}

model Profile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  prefs  String // JSON as text
}

model League {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  platform   String   // 'sleeper' | 'espn' | 'yahoo' | 'cbs' | 'nfl'
  externalId String
  name       String
  scoring    String   // JSON as text
  teams      Team[]

  @@unique([externalId, userId])
}

model Team {
  id         String @id @default(cuid())
  league     League @relation(fields: [leagueId], references: [id])
  leagueId   String
  externalId String
  name       String
  rosters    Roster[]

  @@unique([externalId, leagueId])
}

model PlayerIdentity {
  pid       String @id // stable internal key
  name      String
  pos       String
  nfl       String
  sleeperId String? @unique
  espnId    String? @unique
  yahooId   String? @unique
  cbsId     String? @unique
}

model Roster {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  week      Int
  // array of { pid, slot, status } â€“ stored as JSON for portability
  players   String   // JSON as text
  createdAt DateTime @default(now())
}

model MetricCache {
  id        String   @id @default(cuid())
  userId    String
  week      Int
  kind      String   // 'exposure' | 'winprob' | ...
  payload   String   // JSON as text
  updatedAt DateTime @updatedAt
}